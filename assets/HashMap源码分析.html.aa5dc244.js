import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";import{o as s,c as a,e as p}from"./app.837ab119.js";var e="/blog/assets/image-20220310170842726.5862f685.png",t="/blog/assets/HashMap-putVal\u65B9\u6CD5.473c08c5.png";const o={},c=p('<h1 id="hashmap\u6E90\u7801\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#hashmap\u6E90\u7801\u5206\u6790" aria-hidden="true">#</a> HashMap\u6E90\u7801\u5206\u6790</h1><h2 id="_1-\u5E95\u5C42\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_1-\u5E95\u5C42\u7ED3\u6784" aria-hidden="true">#</a> 1. \u5E95\u5C42\u7ED3\u6784</h2><p><mark>\u6570\u7EC4 + \u94FE\u8868 + \u7EA2\u9ED1\u6811</mark> \uFF08jdk1.8\u4E4B\u524D\u6CA1\u6709\u7EA2\u9ED1\u6811\u7ED3\u6784\uFF0C\u53EA\u662F\u7B80\u5355\u7684 \u6570\u7EC4 + \u94FE\u8868 \uFF09</p><p><img src="'+e+`" alt="image-20220310170842726" loading="lazy"></p><p>Java 8\u5BF9HashMap\u7684\u5B9E\u73B0\u8FDB\u884C\u4E86\u4F18\u5316\uFF0C\u5728\u54C8\u5E0C\u51B2\u7A81\u6BD4\u8F83\u4E25\u91CD\u7684\u60C5\u51B5\u4E0B\uFF0C\u5373\u5927\u91CF\u5143\u7D20\u6620\u5C04\u5230\u540C\u4E00\u4E2A\u94FE\u8868\u7684\u60C5\u51B5\u4E0B\uFF08\u5177\u4F53\u662F\u81F3\u5C11\u5DF2\u4FDD\u5B588\u4E2A\u5143\u7D20\uFF0C\u4E14\u603B\u7684\u952E\u503C\u5BF9\u4E2A\u6570\u81F3\u5C11\u662F64\uFF09, Java 8\u4F1A\u5C06\u8BE5\u94FE\u8868\u8F6C\u6362\u4E3A\u4E00\u4E2A\u7EA2\u9ED1\u6811\uFF0C\u4EE5\u63D0\u9AD8\u67E5\u8BE2\u7684\u6548\u7387</p><br><h2 id="_2-\u6E90\u7801\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_2-\u6E90\u7801\u7ED3\u6784" aria-hidden="true">#</a> 2. \u6E90\u7801\u7ED3\u6784</h2><h3 id="_1-\u5B9E\u4F8B\u53D8\u91CF" tabindex="-1"><a class="header-anchor" href="#_1-\u5B9E\u4F8B\u53D8\u91CF" aria-hidden="true">#</a> 1) \u5B9E\u4F8B\u53D8\u91CF</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// HashMap</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**---------------------------------\u5E38\u91CF-------------------------------------------------*/</span>

    <span class="token comment">// The default initial capacity - MUST be a power of two. \u9ED8\u8BA4\u521D\u59CB\u5316\u5BB9\u91CF</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token comment">// aka 16</span>

    <span class="token comment">// The maximum capacity, \u6700\u5927\u5BB9\u91CF</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAXIMUM_CAPACITY <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span>

    <span class="token comment">// The load factor used when none specified in constructor. \u9ED8\u8BA4\u52A0\u8F7D\u56E0\u5B50</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The bin count threshold for using a tree rather than list for a bin. 
     * Bins are converted to trees when adding an element to a bin with at least this many nodes. 
     * The value must be greater than 2 and should be at least 8 to mesh with assumptions in
     * tree removal about conversion back to plain bins upon shrinkage.
     * \u5148\u7B80\u5355\u7406\u89E3\u4E3A\uFF1A\u5C06\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\u7684\u9608\u503C
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The bin count threshold for untreeifying a (split) bin during a resize operation. 
     * Should be less than TREEIFY_THRESHOLD, and at most 6 to mesh with shrinkage detection under removal.
     * \u5148\u7B80\u5355\u7406\u89E3\u4E3A\uFF1A\u5C06\u7EA2\u9ED1\u6811\u8F6C\u6362\u4E3A\u94FE\u8868\u7684\u9608\u503C
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UNTREEIFY_THRESHOLD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * The smallest table capacity for which bins may be treeified.
     * (Otherwise the table is resized if too many nodes in a bin.)
     * Should be at least 4 * TREEIFY_THRESHOLD to avoid conflicts
     * between resizing and treeification thresholds.
     * \u5148\u7B80\u5355\u7406\u89E3\u4E3A\uFF1A\u5C06\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\u65F6\uFF0C\u8FD8\u9700\u8981\u5224\u65AD\u5DF2\u5B58\u50A8\u7684\u6570\u636E\u91CF\u662F\u5426\u8FBE\u5230\u8BE5\u503C
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MIN_TREEIFY_CAPACITY <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span>



    <span class="token comment">/* ---------------------------------- Fields \u5B9E\u4F8B\u53D8\u91CF --------------------------- */</span>

    <span class="token comment">// table\u662F\u4E00\u4E2ANode\u7C7B\u578B\u7684\u6570\u7EC4\uFF0C\u79F0\u4E3A\u54C8\u5E0C\u8868\u6216\u54C8\u5E0C\u6876\uFF0C\u5176\u4E2D\u7684\u6BCF\u4E2A\u5143\u7D20\u6307\u5411\u4E00\u4E2A\u5355\u5411\u94FE\u8868\uFF0C\u94FE\u8868\u4E2D\u7684\u6BCF\u4E2A\u8282\u70B9\u8868\u793A\u4E00\u4E2A\u952E\u503C\u5BF9</span>
    <span class="token keyword">transient</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> table<span class="token punctuation">;</span>  

    <span class="token keyword">transient</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entrySet<span class="token punctuation">;</span>

    <span class="token keyword">transient</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span>            <span class="token comment">// size\u8868\u793A\u5B9E\u9645\u952E\u503C\u5BF9\u7684\u4E2A\u6570</span>

    <span class="token keyword">transient</span> <span class="token keyword">int</span> modCount<span class="token punctuation">;</span>       

    <span class="token doc-comment comment">/**
     * The next size value at which to resize (capacity * load factor).
     */</span>
    <span class="token comment">// (The javadoc description is true upon serialization.</span>
    <span class="token comment">// Additionally, if the table array has not been allocated, this</span>
    <span class="token comment">// field holds the initial array capacity, or zero signifying</span>
    <span class="token comment">// DEFAULT_INITIAL_CAPACITY.)</span>
    <span class="token keyword">int</span> threshold<span class="token punctuation">;</span>

    <span class="token comment">// The load factor for the hash table.</span>
    <span class="token keyword">final</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">;</span>



    <span class="token doc-comment comment">/** ------------------------------ Node \u9759\u6001\u5185\u90E8\u7C7B ----------------------------------- */</span>
    <span class="token doc-comment comment">/**
     * Basic hash bin node, used for most entries.  
     * (See below for TreeNode subclass, and in LinkedHashMap for its Entry subclass.)
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
        <span class="token class-name">V</span> value<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-\u6784\u9020\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-\u6784\u9020\u65B9\u6CD5" aria-hidden="true">#</a> 2) \u6784\u9020\u65B9\u6CD5</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u6784\u9020\u4E00\u4E2A\u5177\u6709\u9ED8\u8BA4\u521D\u59CB\u5BB9\u91CF (16) \u548C\u9ED8\u8BA4\u52A0\u8F7D\u56E0\u5B50 (0.75) \u7684\u7A7AHashMap</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span> <span class="token comment">// all other fields defaulted</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6784\u9020\u4E00\u4E2A\u5E26\u6307\u5B9A\u521D\u59CB\u5BB9\u91CF\u548C\u9ED8\u8BA4\u52A0\u8F7D\u56E0\u5B50 (0.75) \u7684\u7A7A HashMap</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6784\u9020\u4E00\u4E2A\u5E26\u6307\u5B9A\u521D\u59CB\u5BB9\u91CF\u548C\u52A0\u8F7D\u56E0\u5B50\u7684\u7A7A HashMap</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">float</span> loadFactor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal initial capacity: &quot;</span> <span class="token operator">+</span> initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>
        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loadFactor <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Illegal load factor: &quot;</span> <span class="token operator">+</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> loadFactor<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>threshold <span class="token operator">=</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u5148\u5C06 tableSizeFor \u65B9\u6CD5\u590D\u5236\u5230\u8FD9\u91CC\u7814\u7A76\u7814\u7A76\uFF1A</span>
<span class="token comment">// \u8FD9\u4E2A\u65B9\u6CD5\u7684\u4F5C\u7528: \u5C31\u662F\u628A\u6307\u5B9A\u503C\u53D8\u6210\u4E00\u4E2A\u5927\u4E8E\u7B49\u4E8E\u8FD9\u4E2A\u503C\u7684\u6700\u5C0F\u76842\u7684\u5E42\u503C\u65B9\u6CD5</span>
<span class="token comment">// \u5982\uFF1A 16 -&gt; 16;   20 -&gt; 32;  60 -&gt; 64;  64 -&gt; 64</span>
<span class="token comment">// \u4E0D\u7528\u62C5\u5FC3\u9608\u503C\u4F1A\u5927\u4E8E\u6570\u7EC4\u957F\u5EA6\uFF0C\u9996\u6B21\u6DFB\u52A0\u5143\u7D20\u65F6\u4F1A \u6267\u884Cresize() \u65B9\u6CD5\uFF0C\u4E0B\u9762\u4F1A\u518D\u6B21\u89E3\u91CA\u8BE5\u65B9\u6CD5</span>
<span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">tableSizeFor</span><span class="token punctuation">(</span><span class="token keyword">int</span> cap<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">4</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">;</span>
    n <span class="token operator">|=</span> n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token operator">?</span> MAXIMUM_CAPACITY <span class="token operator">:</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u6784\u9020\u4E00\u4E2A\u6620\u5C04\u5173\u7CFB\u4E0E\u6307\u5B9A Map \u76F8\u540C\u7684\u65B0 HashMap</span>
<span class="token keyword">public</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>loadFactor <span class="token operator">=</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">;</span>
    <span class="token function">putMapEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>loadFactor(\u52A0\u8F7D\u56E0\u5B50)</strong>\uFF1A\u662F\u7528\u6765\u9650\u5B9A\u9608\u503C\u7684 , \u5982\u679CHashMap\u5B58\u50A8\u7684\u6570\u636E(key-value\u4EFD\u6570)\u8D85\u8FC7\u9608\u503C, \u5E95\u5C42\u6570\u7EC4\u9700\u8981\u8FDB\u884C\u6269\u5BB9</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\uFF1A
 \u9608\u503C<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token operator">=</span> \u52A0\u8F7D\u56E0\u5B50<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">*</span> \u6570\u7EC4\u957F\u5EA6<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>

<span class="token comment">// \u6CE8\u610F: \u867D\u7136\u6211\u4EEC\u53EF\u4EE5\u505A\u5728\u6784\u9020\u65B9\u6CD5\u91CC\u4FEE\u6539\u52A0\u8F7D\u56E0\u5B50: \u4F46\u662F\u5EFA\u8BAE\u4E0D\u8981\u4FEE\u6539, \u5B9E\u5728\u8981\u4FEE\u6539(\u5EFA\u8BAE\u4FDD\u8BC1\u57280.5-1\u4E4B\u95F4)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="_3-\u5B58\u50A8\u8FC7\u7A0B" tabindex="-1"><a class="header-anchor" href="#_3-\u5B58\u50A8\u8FC7\u7A0B" aria-hidden="true">#</a> 3. \u5B58\u50A8\u8FC7\u7A0B</h2><p>HashMap\u662F\u5982\u4F55\u628A\u4E00\u4E2A\u952E\u503C\u5BF9\uFF08key-value\uFF09\u4FDD\u5B58\u8D77\u6765\u7684\uFF1F</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\u6B65\u9AA4\uFF1A<span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">&gt;</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">1.</span> \u5148\u8BA1\u7B97 key \u7684 hash\u503C \uFF08 \u8C03\u7528\u4E86<span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \u65B9\u6CD5 \uFF09
   <span class="token class-name">HashMap</span>\u5E76\u6CA1\u6709\u76F4\u63A5\u63D0\u4F9BputVal\u65B9\u6CD5\u7ED9\u7528\u6237\u8C03\u7528\uFF0C\u800C\u662F\u63D0\u4F9Bput\u65B9\u6CD5\u7ED9\u7528\u6237\uFF0C\u8BA1\u7B97\u51FAhash\u503C\u540E\u518D\u8C03\u7528putVal\u6765\u63D2\u5165\u5143\u7D20

<span class="token number">2.</span> \u5224\u65AD\u5E95\u5C42\u6570\u7EC4\u662F\u5426\u4E3A\u7A7A\uFF08\u610F\u5473\u7740\u9996\u6B21\u6DFB\u52A0\uFF09\u6216\u957F\u5EA6\u662F\u5426\u4E3A<span class="token number">0</span>\u6765\u51B3\u5B9A\u662F\u5426\u6269\u5BB9

<span class="token number">3.</span> \u5C06 <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \u65B9\u6CD5\u8BA1\u7B97\u7684 hash\u503C \u548C \u6570\u7EC4\u957F\u5EA6\u53D6\u6A21\uFF0C\u5F97\u5230\u5B58\u50A8\u4F4D\u7F6E\u7684\u4E0B\u6807

<span class="token number">4.</span> \u5C06\u6570\u636E\u5B58\u50A8\u5230\u8BE5\u4E0B\u6807\u7684\u4F4D\u7F6E 
    <span class="token operator">-</span> \u82E5\u8BE5\u4F4D\u7F6E\u6CA1\u6709\u5B58\u50A8\u8FC7\u6570\u636E\uFF0C\u76F4\u63A5\u5B58\u50A8\u5373\u53EF
    <span class="token operator">-</span> \u82E5\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u5B58\u50A8\u4E86\u6570\u636E\uFF0C\u5148\u5224\u65AD\u8BE5\u4F4D\u7F6E\u6570\u636E\u7684key\u662F\u5426\u91CD\u590D\u3001\u91CD\u590D\u8986\u76D6value\u5373\u53EF\uFF0C
      \u82E5\uFF08\u7B2C\u4E00\u6B21\u8282\u70B9\uFF09\u4E0D\u91CD\u590D\uFF0C\u63A5\u4E0B\u6765\u5C31\u9700\u8981\u533A\u5206\u662F\u94FE\u8868\u8FD8\u662F\u7EA2\u9ED1\u6811\uFF0C\u518D\u6BD4\u8F83\u5143\u7D20\u662F\u5426\u91CD\u590D\u51B3\u5B9A\u662F\u5426\u6784\u5EFA\u65B0\u7684<span class="token class-name">Node</span>
    <span class="token operator">-</span> \u82E5\u662F\u94FE\u8868\u65F6\u8FD8\u9700\u8981\u5224\u65AD\u94FE\u8868\u662F\u5426\u8FC7\u957F\uFF0C\u82E5\u8FBE\u5230\u9608\u503C\uFF0C\u9700\u8981\u5C06\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811
    <span class="token operator">-</span> \u82E5\u662F\u7EA2\u9ED1\u6811\uFF0C\u5219\u8C03\u7528 <span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> \u65B9\u6CD5
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+t+`" alt="HashMap-putVal\u65B9\u6CD5" loading="lazy"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u53C2\u7167\u4E0A\u8FF0\u6B65\u9AA4\u8FDB\u884C\u6E90\u7801\u89E3\u8BFB</span>
<span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1. \u5148\u8C03\u7528 hash() \u65B9\u6CD5\u8BA1\u7B97hash\u503C</span>
        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Implements Map.put and related methods.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">hash</span> hash for key
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> the key
     * <span class="token keyword">@param</span> <span class="token parameter">value</span> the value to put
     * <span class="token keyword">@param</span> <span class="token parameter">onlyIfAbsent</span> if true, don&#39;t change existing value
     * <span class="token keyword">@param</span> <span class="token parameter">evict</span> if false, the table is in creation mode.
     * <span class="token keyword">@return</span> previous value, or null if none
     */</span>
    <span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span> <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>  <span class="token comment">// \u6307\u5411\u5E95\u5C42\u6570\u7EC4</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>      <span class="token comment">// \u6307\u5411\u6570\u7EC4\u4E2D\u7684\u5F85\u6DFB\u52A0\u5143\u7D20\u7684\u90A3\u4E2A\u8282\u70B9</span>
        <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>         <span class="token comment">// n \u8868\u793A\u5E95\u5C42\u6570\u7EC4\u7684\u957F\u5EA6\uFF0C i\u8868\u793A p \u6240\u5728\u6570\u7EC4\u7684\u4E0B\u6807</span>

        <span class="token comment">// 2. \u5224\u65AD\u5E95\u5C42\u6570\u7EC4\u662F\u5426\u4E3A\u7A7A\uFF08\u610F\u5473\u7740\u9996\u6B21\u6DFB\u52A0\uFF09\u6216\u957F\u5EA6\u662F\u5426\u4E3A0\u6765\u51B3\u5B9A\u662F\u5426\u6269\u5BB9</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token comment">// 3. \u5C06 hash() \u65B9\u6CD5\u8BA1\u7B97\u7684 hash\u503C \u548C \u6570\u7EC4\u957F\u5EA6\u53D6\u6A21\uFF0C\u5F97\u5230\u5B58\u50A8\u4F4D\u7F6E\u7684\u4E0B\u6807</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 4.1 \u8BE5\u4F4D\u7F6E\u6CA1\u6709\u5B58\u50A8\u8FC7\u6570\u636E\uFF0C\u76F4\u63A5\u5B58\u50A8\u5373\u53EF</span>
            tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 4.2 \u8BF4\u660E\u8BE5\u4F4D\u7F6E\u5DF2\u7ECF\u5B58\u50A8\u4E86\u6570\u636E\uFF0C\u5219\u8981\u533A\u5206\u662F\u94FE\u8868\u8FD8\u662F\u7EA2\u9ED1\u6811</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span> 
            <span class="token class-name">K</span> k<span class="token punctuation">;</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// \u8BF4\u660E\u8BE5\u4F4D\u7F6E\u5B58\u50A8\u5143\u7D20\u7684key\u4E0E\u672C\u6B21\u8981\u5B58\u7684key\u91CD\u590D </span>
                e <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                <span class="token comment">// \u8BF4\u660E\u662F\u4E00\u4E2A\u7EA2\u9ED1\u6811\uFF0C\u8C03\u7528\u5904\u7406\u6811\u7684\u65B9\u6CD5\u7EE7\u7EED\u6267\u884C</span>
                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u6765\u5230\u8FD9\u513F\u8BF4\u660E\u8FD9\u4E2A\u4E0B\u6807\u5B58\u50A8\u6709\u5185\u5BB9, \u5E76\u4E14\u662F\u4E00\u4E2A\u94FE\u8868</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// existing mapping for key \uFF08\u5904\u7406\u91CD\u590Dkey\u7684\u60C5\u5F62\uFF09</span>
                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">&gt;</span> threshold<span class="token punctuation">)</span>  <span class="token comment">// \u6DFB\u52A0\u5143\u7D20\u540E\u9700\u8981\u68C0\u6D4B\u662F\u5426\u9700\u8981\u6269\u5BB9</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_1-\u8BA1\u7B97hash\u503C" tabindex="-1"><a class="header-anchor" href="#_1-\u8BA1\u7B97hash\u503C" aria-hidden="true">#</a> 1) \u8BA1\u7B97hash\u503C</h3><p>hash\u65B9\u6CD5\uFF1A\u6839\u636E key \u54C8\u5E0C(\u6563\u5217) \u4E00\u4E2Ahash\u503C</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> h<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token punctuation">(</span>h <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// \u5F53key\u4E3A null \u65F6\uFF0C \u8FD4\u56DE0</span>
<span class="token comment">// \u4E0D\u4E3Anull\u65F6\uFF0C\u5148\u8C03\u7528 \u8BE5\u5BF9\u8C61\u7684 hashCode()\u65B9\u6CD5\uFF0C\u518D\u8FDB\u884C\u53F3\u79FB16\u4F4D\u7136\u540E\u4E0E\u81EA\u8EAB\u8FDB\u884C\u4EA6\u6216</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u90A3\u4E48\u8FD9\u91CC\u4E3A\u4EC0\u4E48\u8981\u5148\u79FB\u4F4D\u53C8\u505A\u5F02\u6216\u8FD0\u7B97\uFF1F</p><p>\u5176\u5B9E\u662F\u5E0C\u671Bkey\u7684 hashCode() \u4F4E\u4F4D\u80FD\u591F\u5145\u5206\u6DF7\u5408(\u548C\u9AD8\u4F4D), \u518D\u53C2\u6570\u53D6\u6A21, \u53D6\u6A21\u7684\u7ED3\u679C\u5C31\u66F4\u968F\u673A</p><br><p>\u53D6\u4E0B\u6807\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// \u8FD8\u8BB0\u5F97putVal\u65B9\u6CD5\u4E2D\u7684\u4E0B\u5217\u4EE3\u7801\u5417\uFF1F</span>
i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>

<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash     <span class="token comment">// hash\u503C\u548C\u6570\u7EC4\u957F\u5EA6\u53D6\u6A21,\u7B49\u540C\u4E8E\uFF1Ahash % (n - 1)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_2-resize-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#_2-resize-\u65B9\u6CD5" aria-hidden="true">#</a> 2) resize()\u65B9\u6CD5</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token comment">// HashMap\u7684\u6269\u5BB9\u65B9\u6CD5</span>

    <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// oldTab \u65E7\u7684\u5E95\u5C42\u6570\u7EC4</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>           

        <span class="token comment">// oldCap \u65E7\u6570\u7EC4\u957F\u5EA6, \u5F53\u5E95\u5C42\u6570\u7EC4\u4E3Anull\u65F6\uFF08\u7B2C\u4E00\u6B21\u6DFB\u52A0\u5143\u7D20\uFF09\uFF0C\u65E7\u7684\u5BB9\u91CF\u4E3A0\uFF0C\u5426\u5219\u4E3A\u6570\u7EC4\u957F\u5EA6</span>
        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>  

        <span class="token comment">// oldThr \u65E7\u9608\u503C </span>
        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>

        <span class="token comment">// \u5B9A\u4E49\u65B0\u957F\u5EA6, \u65B0\u9608\u503C</span>
        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>


        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">&gt;=</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> oldCap <span class="token operator">&gt;=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span>
                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> 
            newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>             
            <span class="token comment">// int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4;</span>
            <span class="token comment">// newCap =  16</span>
            newCap <span class="token operator">=</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">;</span>
            <span class="token comment">// newThr =  0.75 * 16 = 12</span>
            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>DEFAULT_LOAD_FACTOR <span class="token operator">*</span> DEFAULT_INITIAL_CAPACITY<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> MAXIMUM_CAPACITY <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>MAXIMUM_CAPACITY <span class="token operator">?</span>
                      <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// threshold = 12</span>
        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>

        <span class="token comment">// \u521B\u5EFA\u65B0\u6570\u7EC4: 16\u957F\u5EA6\u6570\u7EC4</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>


        <span class="token comment">// </span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// preserve order</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">{</span>
                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-\u6DFB\u52A0\u5230\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_3-\u6DFB\u52A0\u5230\u94FE\u8868" aria-hidden="true">#</a> 3) \u6DFB\u52A0\u5230\u94FE\u8868</h3><h3 id="_4-\u6DFB\u52A0\u5230\u7EA2\u9ED1\u6811" tabindex="-1"><a class="header-anchor" href="#_4-\u6DFB\u52A0\u5230\u7EA2\u9ED1\u6811" aria-hidden="true">#</a> 4) \u6DFB\u52A0\u5230\u7EA2\u9ED1\u6811</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// TODO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><br><h2 id="_4-\u5E38\u89C1\u95EE\u9898" tabindex="-1"><a class="header-anchor" href="#_4-\u5E38\u89C1\u95EE\u9898" aria-hidden="true">#</a> 4. \u5E38\u89C1\u95EE\u9898</h2><br>`,39),l=[c];function i(u,k){return s(),a("div",null,l)}var v=n(o,[["render",i],["__file","HashMap\u6E90\u7801\u5206\u6790.html.vue"]]);export{v as default};
